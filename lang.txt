

语言要素：
	1、首先，语言是脚本语言，需要自己实现虚拟机，不是aot提前编译，然后链接成可以执行的文件；
	2、为简单起见，不采用类的结构，类似 lua 的机制，不需要主函数也可以执行
	3、可以直接解释执行，也可以编译成二进制文件保存，后面再执行
	4、语法简单，容易上手，可以方便嵌入其他应用
	5、要有一些基本库，数学，io，时间日期，字符串处理，大数计算等
	6、是同步执行
	7、没有类型，语言层面实现泛型

	类型大小：
		byte: 1, 整形：8，浮点：8，nil：0，布尔：1

	声明变量：
		a = 100		// int
		b = 1.123	// double
		c = "aaa"	// string
		d = `` adsasas // multi line string
			asdasd``
		e = [100, "", {}]		// array
		f = {"a": {}, 10:"aa"}		// dictionary
		h = true
		i = fn (aasaa) {}

	条件:
		if a == b || c != d >= <= > <
		else if 
		else 
	
	循环:
		for (i = 0; i < 100; ++i)
		{
		}
		for (a, b in aas) {}


		while cond
		{
			continue

			break
		}
		
		do {} while (cond);

		switch ()
		{
			case 1:
			break
			default:
			//
		}

	异常：
		try {
			
		}catch exception
		{
			
		}
	
	作用域：
		{

		}
	

	函数：
		// public 函数
		fn func(num)
		{
			ret 12124
		}
		// 私有函数
		local fn test()
		{

		}
		
		fn args(...) {
			local len = #args
			for (arg : args) {

			}
			for(int i = 0; i < #args; ++i) {

			}
		}
		
	注释：
		// 单行
		/* */ 多行

	关键字：
		local, do, while, for, fn, try, catch, switch, case default, break, continue, require, goto, ret
		
	符号：
		=, ==, !=, !, :, >, >=, <, <=, /, %, >>, <<, *, -, +, &, ^, |, #, ., (), {}, [], ", ', ``, ;, ~, ++, --, +=, -=, *=, /=


	二元运算符		一元运算符     
		+				! 、++、--
	  /   \			   	|
	node  node		   node

	数据类型：
		nil, boolean, number, string, function, table

	变量：
		使用前需要声明，变量默认是全局变量，除非使用 local 修饰，使用 local 修饰的变量在退出作用域后销毁

	赋值语句： 
		assignment -> 非数字开头的变量，不能出现操作符 ，可以出现 $, _ 开头
		声明类型：local 和 非 local
		初始化类型：1、数字 2、字符串 3、数组 4、表
	
	流程控制：
		if ( condition ) {
			if ( confition ) ...
			statement ...
		}
		else if ( condition ) statement ...
		else ...

	循环：
		while ( condition ) statement \n | { statement ... }
		do { statement ... } while (codnition )#
		for (var a = 0, b = '0', c = "s", d = [], e = {}; condition ; operation) statement \n | { statement ... }
		for(k, v in tb | arr)

	函数：
		optional_function_scope fn function_name( argument1, argument2, argument3..., argumentn) {
    		function_body
    		ret result_params_comma_separated
		}


	存储：
		source 文件
		line range
		nparam
		